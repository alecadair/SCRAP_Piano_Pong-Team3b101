//START Jump Table:
//NOTE: R14 AND R13 USED FOR JUMPING
0000_0000_0110_1100	//Address of label 'EXIT' at line 108
0000_0000_0100_0100	//Address of label 'DATAISNOTONETWOZERO' at line 68
0000_0000_0100_1001	//Address of label 'DATAISZERO' at line 73
0000_0000_0000_1001	//Address of label 'MAIN' at line 9
0000_0000_0100_1110	//Address of label 'DATAISONE' at line 78
0000_0000_0010_1000	//Address of label 'INITIALIZE' at line 40
0000_0000_0011_0100	//Address of label 'CHECKADDRESS' at line 52
0000_0000_0101_0101	//Address of label 'DATAISTWO' at line 85
0000_0000_0101_1100	//Address of label 'DATACHECKED' at line 92
//END Jump Table


//PROGRAM START LINE (I.E., SET PC INITIALIZATION TO):  9
// loop through memory addresses 3fff - 3ff4;
// if the data at the address is 0, update R8's status bit to 0;
// if the data at the address is non zero:
//      // if the data at the address is a 1, update p1 score +1; p2 -1; change data to 0
//      // if the data at the address is a 2, update p2 score +1; p1 -1; change data to 0
//      // if the data bit is a any other note, update the status bit to 1;

//p1 score stored in r11, p2 score stored in r12.\

//.MAIN
//loop through memory address and set them to zero.
0001_1100_0000_0000	//ANDI 0 R12
0001_1111_0000_0000	//ANDI 0 R15
0001_0000_0000_0000	//ANDI 0 R0
//initialize r0
1001_0000_0000_0001	//SUBI 1 R0
0000_0010_1101_0000	//MOV R0 R2
1000_0000_0100_0010	//LSH R2 R0
1000_0000_0100_0010	//LSH R2 R0

0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0
0100_0000_0100_1111	//STOR R15 R0
1001_0000_0000_0001	//SUBI 1 R0

//.INITIALIZE
0001_0000_0000_0000	//ANDI 0 R0
//initialize r0
1001_0000_0000_0001	//SUBI 1 R0
0000_0010_1101_0000	//MOV R0 R2
1000_0000_0100_0010	//LSH R2 R0
1000_0000_0100_0010	//LSH R2 R0

//R0 now contains 0x3fff (address of note 0).
//initialize r3 for the one check and r4 for zero check.

0000_0011_0001_1111	//AND R15 R3
0000_0100_0001_1111	//AND R15 R4
1001_0100_0000_0001	//SUBI 1 R4
0000_0010_0001_1111	//AND R15 R2
0101_0010_0000_0001	//ADDI 1 R2
1000_0100_0100_0010	//LSH R2 R4
0000_0111_0001_1111	//AND R15 R7
//R3 and R4 registers are initialized.

//.CHECKADDRESS
0100_0000_0000_0001	//LOAD R1 R0
0001_0010_0000_0000	//ANDI 0 R2
1101_1101_0000_0010	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_0001_1011_0010	// CMP 
0100_0000_1100_1110	// JCOND 

0101_0010_0000_0001	//ADDI 1 R2
1101_1101_0000_0100	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_0001_1011_0010	// CMP 
0100_0000_1100_1110	// JCOND 

0101_0010_0000_0001	//ADDI 1 R2
1101_1101_0000_0111	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_0001_1011_0010	// CMP 
0100_0000_1100_1110	// JCOND 


//.DATAISNOTONETWOZERO
0000_1000_0010_0011	//OR R3 R8
1101_1101_0000_1000	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_1111_1011_1111	// CMP 
0100_0000_1100_1110	// JCOND 



//.DATAISZERO
0000_1000_0001_0100	//AND R4 R8
1101_1101_0000_1000	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_1111_1011_1111	// CMP 
0100_0000_1100_1110	// JCOND 


//if the data is one, player one scores. (score goes up) data goes to zero.
//.DATAISONE
0101_1100_0000_0001	//ADDI 1 R12
0000_0010_0001_1111	//AND R15 R2
0100_0000_0100_0010	//STOR R2 R0
1101_1101_0000_1000	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_1111_1011_1111	// CMP 
0100_0000_1100_1110	// JCOND 


//if the data is two, player two scores. (score goes down) data goes to zero.
//.DATAISTWO
1001_1100_0000_0001	//SUBI 1 R12
0000_0010_0001_1111	//AND R15 R2
0100_0000_0100_0010	//STOR R2 R0
1101_1101_0000_1000	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_1111_1011_1111	// CMP 
0100_0000_1100_1110	// JCOND 


//.DATACHECKED
0001_0010_0000_0000	//ANDI 0 R2
0101_0010_0000_0001	//ADDI 1 R2
1000_0011_0100_0010	//LSH R2 R3
1000_0100_0100_0010	//LSH R2 R4
0010_0100_0000_0001	//ORI 1 R4
0101_0111_0000_0001	//ADDI 1 R7
0000_0010_0001_1111	//AND R15 R2
0101_0010_0000_1100	//ADDI 12 R2
1101_1101_0000_0101	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_0111_1011_1100	// CMP 
0100_0000_1100_1110	// JCOND 

1101_1101_0000_0110	// MOVI 
0100_1110_0000_1101	// LOAD 
0000_1111_1011_1111	// CMP 
0100_0000_1100_1110	// JCOND 



//.EXIT
